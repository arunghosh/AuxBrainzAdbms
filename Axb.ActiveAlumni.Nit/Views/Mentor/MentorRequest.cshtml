@model Axb.ActiveAlumni.Nit.ViewModels.MentorRequestVm

@{
    ViewBag.Title = "New Mentoring Reqest";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}
<style>
    #mntrCtnr a {
        font-size: 16px;
        font-weight: bold;
    }

    #mntrCtnr h4 {
        display: none;
    }
</style>
<div class="p20">
    <h4>Mentoring Request</h4>
    @if (Model.IsDone)
    {
        <h5>Your mentoring request has been send to Alumni Mentoring for processing.</h5>
    }
    else
    {

        <div>
            @using (Html.BeginForm("MentorRequest", "Mentor", FormMethod.Post, new { @class = "form-horizontal" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.StudentId)
                <div id="skillIp">
                    <input type="text" placeholder="Enter desired skill for the mentor" name="newSkill" data-autocomplete-source='@Url.Action(Routes.AcJoinedSkills)' />
                    <button class="btn-primary" style="background: #369">Add</button>
                </div>
                <ul id="skillList" class="ltype-none" style="">
                </ul>
                <br />
                <div class="clrb">
                    <textarea name="Message" placeholder="Mentoring Request Messsage" style="width: 450px; height: 150px"></textarea>
                    <div class="dim ft-sl-i">Note: In the message specific your areas on interest and your expectation from the mentor.</div>
                </div>
                <div class="pop-cnt-btns">
                    @Html.Bootstrap().SubmitButton().Text("Send Request").HtmlAttributes(new { @class = "btn-primary" })
                </div>

                <p>
                    @Html.ValidationSummary()
                </p>
            }
        </div>
    }
</div>
@section Scripts
{
    <script type="text/javascript">
        $("#skillIp input").autocomplete({
            select: function (a, b) {
                addSkill(b.item.value);
                this.value = '';
                return false;
            }
        });

        $("#skillIp button").click(function () {
            var input = $('#skillIp input');
            if (input.val().length > 0) {
                var skills = input.val().split(',');
                for (var i = 0; i < skills.length; i++) {
                    addSkill(skills[i]);
                }
                input.val('');
            }
            return false;
        });

        function addSkill(skill) {
            var $ctnr = $('<li>')
            $('#skillList').append($ctnr);
            $('<span>')
                .addClass('value')
                .text(skill)
                .appendTo($ctnr);
            $('<input>')
                .attr({ type: 'hidden', value: skill, name: 'SeleSkills' })
                .appendTo($ctnr);
            $('<span>')
                .addClass('close')
                .text('X')
                .click(function () {
                    $(this).parent().remove();
                })
                .appendTo($ctnr);
            $("#skillIp input").focus();
        }
    </script>
}